#!/usr/bin/env ruby
require 'optparse'
require 'find'
require 'lutra'
require 'lutra/version'

verbose  = false
color    = STDOUT.tty?
usage    = 'Usage: lutra [OPTIONS] [PATH]'
tags     = Lutra::TAGS
comments = Lutra::COMMENTS
formatter_name = :default
formatter_opts = {}

ARGV.options do |o|
  o.version = Lutra::VERSION
  o.banner = usage

  o.on('-t', '--tags=TAG', 'Search for custom tags') do |tag|
    tags = tag.split(',').map(&:strip)
  end

  o.on('-c', '--comments=COM', 'Specify comment lines') do |com|
    comments = com.split(',').map(&:strip)
  end

  o.on('-f', '--formatter=NAME', 'Use your own formatter') do |name|
    formatter_name = name.to_sym
  end

  o.on('-s', '--text-size=SIZE', 'Set text size for formatter') do |size|
    formatter_opts[:text_size] = size.to_i
  end

  o.on('-v', '--verbose', 'Verbose output') do
    verbose = true
  end

  o.on('--hide-tags', 'Hide tags') do
    formatter_opts[:display_tags] = false
  end
end

begin
  ARGV.options.parse!
  paths = if ARGV.empty?
    '.'
  else
    ARGV.select { |path| File.exist?(path) }
  end
rescue => e
  STDERR.puts "Error: #{e.message}"
  STDERR.puts usage
  STDERR.puts "Try 'lutra --help' for more information"
  exit 1
end

scanner = Lutra::Scanner.new(tags: tags, comments: comments)

Find.find(*paths) do |path|
  unless paths.include?(path)
    Find.prune if File.basename(path).start_with?('.')
  end

  next if File.directory?(path)

  begin
    scanner.scan_file(path)
  rescue Errno::ENOENT => e
    STDERR.puts "lutra: #{e.message} (broken symlink?)" if verbose
  rescue => e
    STDERR.puts "lutra: #{path}: #{e.message}" if verbose
  end
end

formatter = Lutra::Formatter.new(formatter_opts)
formatter.set(formatter_name)
formatter.display(scanner.notes)

exit
